name: Maven Build and Publish

on:
  push:
    branches:
      - master

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Необходимо для работы с тегами

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Determine next version
        id: version
        run: |
          # Получаем текущую версию из pom.xml
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          # Удаляем -SNAPSHOT если есть
          RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
          
          # Разбиваем версию на части
          IFS='.' read -ra VERSION_PARTS <<< "$RELEASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Увеличиваем патч-версию
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version in POM
        run: |
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
          mvn versions:commit

      - name: Build with Maven
        run: mvn -B clean package

      - name: Publish to GitHub Packages
        run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create git tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a v$NEW_VERSION -m "Release $NEW_VERSION"
          git push origin v$NEW_VERSION